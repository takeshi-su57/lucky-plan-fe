# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Action {
  args: String!
  blockNumber: Int!
  createdAt: DateTime!
  id: Int!
  name: String!
  orderInBlock: Int!
  positionId: Int!
}

input AddUserInput {
  address: String!
}

type BotBackwardDetails {
  endedAt: DateTime
  follower: Follower!
  followerAddress: String!
  followerContract: Contract!
  followerContractId: Int!
  followerEndedBlock: Int
  followerStartedBlock: Int
  id: Int!
  leaderAddress: String!
  leaderCollateralBaseline: Int!
  leaderContract: Contract!
  leaderContractId: Int!
  leaderEndedBlock: Int
  leaderStartedBlock: Int
  plan: Plan
  planId: Int
  startedAt: DateTime
  status: BotStatus!
  strategy: Strategy!
  strategyId: Int!
}

type BotConnection {
  edges: [BotEdge!]!
  pageInfo: BotPageInfo!
}

type BotDetails {
  endedAt: DateTime
  follower: Follower!
  followerAddress: String!
  followerContract: Contract!
  followerContractId: Int!
  followerEndedBlock: Int
  followerStartedBlock: Int
  id: Int!
  leaderAddress: String!
  leaderCollateralBaseline: Int!
  leaderContract: Contract!
  leaderContractId: Int!
  leaderEndedBlock: Int
  leaderStartedBlock: Int
  planId: Int
  startedAt: DateTime
  status: BotStatus!
  strategy: Strategy!
  strategyId: Int!
}

type BotEdge {
  cursor: Int!
  node: BotForwardDetails!
}

type BotForwardDetails {
  endedAt: DateTime
  follower: Follower!
  followerAddress: String!
  followerContract: Contract!
  followerContractId: Int!
  followerEndedBlock: Int
  followerStartedBlock: Int
  id: Int!
  leaderAddress: String!
  leaderCollateralBaseline: Int!
  leaderContract: Contract!
  leaderContractId: Int!
  leaderEndedBlock: Int
  leaderStartedBlock: Int
  missions: [MissionForwardDetails!]!
  planId: Int
  startedAt: DateTime
  status: BotStatus!
  strategy: Strategy!
  strategyId: Int!
}

type BotPageInfo {
  endCursor: Int
  hasNextPage: Boolean!
}

enum BotStatus {
  Created
  Dead
  Live
  Stop
}

input CancelOrderAfterTimeoutInput {
  address: String!
  contractId: Int!
  index: Int!
}

input ChangeContractStatusInput {
  id: Int!
  status: String!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ChangeUserTagInput {
  address: String!
  tag: String!
}

input CloseTradeInput {
  address: String!
  contractId: Int!
  index: Int!
  pairIndex: Int!
}

type Contract {
  address: String!
  backendUrl: String
  chainId: Int!
  description: String!
  id: Int!
  isTestnet: Boolean!
  status: ContractStatus!
}

type ContractExecutionResult {
  address: String!
  contractId: Int!
  index: Int!
  message: String!
  success: Boolean!
}

enum ContractStatus {
  Dead
  Live
}

input CreateBotAndStrategyInput {
  followerContractId: Int!
  leaderAddress: String!
  leaderCollateralBaseline: Int!
  leaderContractId: Int!
  planId: Int
  strategy: CreateStrategyInput!
}

input CreateBotInput {
  followerAddress: String!
  followerContractId: Int!
  leaderAddress: String!
  leaderCollateralBaseline: Int!
  leaderContractId: Int!
  planId: Int
  strategyId: Int!
}

input CreateContractInput {
  address: String!
  chainId: Int!
  description: String!
  lastBlockNumber: Int!
}

input CreatePlanInput {
  description: String!
  scheduledEnd: DateTime!
  scheduledStart: DateTime!
  title: String!
}

input CreateStrategyInput {
  collateralBaseline: Int!
  lifeTime: Float!
  maxCollateral: Float!
  maxLeverage: Int!
  minCollateral: Float!
  minLeverage: Int!
  params: String!
  ratio: Int!
  strategyKey: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Follower {
  accountIndex: Int!
  address: String!
  publicKey: String!
}

type FollowerActionDetails {
  action: Action!
  actionId: Int!
  id: Int!
  taskId: Int!
}

type FollowerDetail {
  accountIndex: Int!
  address: String!
  contractId: Int!
  ethBalance: String
  pnlSnapshots: [PnlSnapshot!]!
  publicKey: String!
  usdcBalance: String
}

type FollowerPendingOrder {
  address: String!
  index: Int!
  params: String!
}

type FollowerTrade {
  address: String!
  index: Int!
  mission: Mission
  params: String!
}

input GetFollowerByAddressInput {
  address: String!
}

input GetTokenInput {
  password: String!
}

type GetTokenResponse {
  accessToken: String!
}

input GetUserByAddressInput {
  address: String!
}

input GetUserTransactionCountsInput {
  address: String!
  contractId: Int!
  endedAt: DateTime
  startedAt: DateTime
}

type Log {
  checked: Boolean!
  details: String
  id: Int!
  severity: LogSeverity!
  summary: String!
  timestamp: DateTime!
}

enum LogSeverity {
  Alert
  Critical
  Debug
  Default
  Emergency
  Error
  Info
  Notice
  Warning
}

type LogsConnection {
  edges: [LogsEdge!]!
  pageInfo: LogsPageInfo!
}

type LogsEdge {
  cursor: Int!
  node: Log!
}

type LogsPageInfo {
  endCursor: Int
  hasNextPage: Boolean!
}

type Mission {
  achievePositionId: Int
  botId: Int!
  createdAt: DateTime!
  id: Int!
  status: MissionStatus!
  targetPositionId: Int!
  updatedAt: DateTime!
}

type MissionBackwardDetails {
  achievePosition: Position
  achievePositionId: Int
  bot: BotBackwardDetails!
  botId: Int!
  createdAt: DateTime!
  id: Int!
  status: MissionStatus!
  targetPosition: Position!
  targetPositionId: Int!
  updatedAt: DateTime!
}

type MissionForwardDetails {
  achievePosition: Position
  achievePositionId: Int
  botId: Int!
  createdAt: DateTime!
  id: Int!
  status: MissionStatus!
  targetPosition: Position!
  targetPositionId: Int!
  tasks: [TaskForwardDetails!]!
  updatedAt: DateTime!
}

type MissionShallowBackwardDetails {
  achievePosition: Position
  achievePositionId: Int
  bot: BotDetails!
  botId: Int!
  createdAt: DateTime!
  id: Int!
  status: MissionStatus!
  targetPosition: Position!
  targetPositionId: Int!
  updatedAt: DateTime!
}

enum MissionStatus {
  Closed
  Closing
  Created
  Ignored
  Opened
  Opening
}

type Mutation {
  addBotsToPlan(botIds: [Int!]!, planId: Int!): PlanForwardDetails!
  addTagToUser(input: ChangeUserTagInput!): User!
  addUser(input: AddUserInput!): User!
  batchCreateBots(input: [CreateBotAndStrategyInput!]!): [BotBackwardDetails!]!
  buildPnlSnapshots(
    dateStr: String!
    isForceBuild: Boolean!
  ): PnlSnapshotInitializedFlag
  cancelOrderAfterTimeout(
    input: CancelOrderAfterTimeoutInput!
  ): ContractExecutionResult!
  changeContractStatus(input: ChangeContractStatusInput!): Contract!
  changePassword(input: ChangePasswordInput!): Boolean!
  checkLog(id: Int!): Log!
  closeMission(id: Int!, isForce: Boolean!): MissionBackwardDetails!
  closeTradeMarket(input: CloseTradeInput!): ContractExecutionResult!
  createBot(input: CreateBotInput!): BotBackwardDetails!
  createContract(input: CreateContractInput!): Contract!
  createPlan(createPlanInput: CreatePlanInput!): PlanForwardDetails!
  createStrategy(input: CreateStrategyInput!): Strategy!
  deleteBot(id: Int!): [BotBackwardDetails!]!
  deleteCategory(id: Int!): TagCategory!
  deletePlan(id: Int!): Int!
  deleteTag(tag: String!): Tag!
  dynamicSnapshotBuild(dateStr: String!): PnlSnapshotInitializedFlag
  endPlan(id: Int!): PlanForwardDetails!
  generateNewFollower: Follower!
  getToken(input: GetTokenInput!): GetTokenResponse!
  ignoreMission(id: Int!): MissionBackwardDetails!
  initializePnlSnapshot: Boolean!
  liveBot(id: Int!): BotBackwardDetails!
  pauseSystem: Boolean!
  performTask(id: Int!): TaskBackwardDetails!
  removeStrategy(id: Int!): Strategy!
  removeTagFromUser(input: ChangeUserTagInput!): User!
  resumeSystem: Boolean!
  startPlan(id: Int!): PlanForwardDetails!
  stopBot(id: Int!): BotBackwardDetails!
  stopTask(id: Int!): TaskBackwardDetails
  updatePlan(updatePlanInput: UpdatePlanInput!): PlanForwardDetails!
  updateStrategyMetadata(
    input: UpdateStrategyMetadataInput!
    key: String!
  ): StrategyMetadata!
  upsertCategory(input: TagCategoryInput!): TagCategory!
  upsertTag(input: TagInput!): Tag!
  withdrawAllETH(input: WithdrawAllInput!): Boolean!
  withdrawAllUSDC(input: WithdrawAllInput!): Boolean!
}

type Plan {
  description: String!
  endedAt: DateTime
  id: Int!
  scheduledEnd: DateTime!
  scheduledStart: DateTime!
  startedAt: DateTime
  status: PlanStatus!
  title: String!
}

type PlanConnection {
  edges: [PlanEdge!]!
  pageInfo: PlanPageInfo!
}

type PlanEdge {
  cursor: Int!
  node: PlanForwardDetails!
}

type PlanForwardDetails {
  bots: [BotForwardDetails!]!
  description: String!
  endedAt: DateTime
  id: Int!
  scheduledEnd: DateTime!
  scheduledStart: DateTime!
  startedAt: DateTime
  status: PlanStatus!
  title: String!
}

type PlanPageInfo {
  endCursor: Int
  hasNextPage: Boolean!
}

enum PlanStatus {
  Created
  Finished
  Started
  Stopped
}

type PnlSnapshot {
  accUSDPnl: Float!
  address: String!
  contractId: Int!
  dateStr: String!
  id: Int!
  kind: PnlSnapshotKind!
}

type PnlSnapshotDetails {
  accUSDPnl: Float!
  address: String!
  contractId: Int!
  dateStr: String!
  histories: [TradeHistory!]!
  id: Int!
  kind: PnlSnapshotKind!
}

type PnlSnapshotDetailsConnection {
  edges: [PnlSnapshotDetailsEdge!]!
  pageInfo: PnlSnapshotDetailsPageInfo!
}

type PnlSnapshotDetailsEdge {
  cursor: Int!
  node: PnlSnapshotDetails!
}

type PnlSnapshotDetailsPageInfo {
  endCursor: Int
  hasNextPage: Boolean!
}

type PnlSnapshotInitializedFlag {
  dateStr: String!
  id: Int!
  isInit: Boolean!
}

enum PnlSnapshotKind {
  ALL_TIME
  DAY
  HALF_YEAR
  MONTH
  THREE_DAY
  THREE_MONTH
  TWO_DAY
  TWO_WEEK
  WEEK
  YEAR
}

type Position {
  address: String!
  contractId: Int!
  id: Int!
  index: Int!
}

type PositionInfo {
  address: String!
  contractId: Int!
  index: Int!
}

type Query {
  allLogs(
    after: Int
    checked: Boolean!
    first: Int!
    severity: LogSeverity
  ): LogsConnection!
  findContract(id: Int!): Contract!
  findStrategy(id: Int!): Strategy
  findStrategyMetadata(key: String!): StrategyMetadata!
  getAlertTasks: [TaskBackwardDetails!]!
  getAllCategories: [TagCategory!]!
  getAllContracts: [Contract!]!
  getAllFollowerDetails(contractId: Int!): [FollowerDetail!]!
  getAllFollowers: [Follower!]!
  getAllStrategy: [Strategy!]!
  getAllStrategyMetadata: [StrategyMetadata!]!
  getAllTags: [Tag!]!
  getAllUsers: [User!]!
  getBotsByStatus(after: Int, first: Int!, status: BotStatus!): BotConnection!
  getFollowerPrivateKey(input: GetFollowerByAddressInput!): String!
  getLogsSeverityCounts: [SeverityCount!]!
  getPendingOrders(address: String!, contractId: Int!): [FollowerPendingOrder!]!
  getPlanById(id: Int!): PlanForwardDetails
  getPlansByStatus(
    after: Int
    first: Int!
    status: PlanStatus!
  ): PlanConnection!
  getPnlSnapshotInitializedFlag: [PnlSnapshotInitializedFlag!]!
  getPnlSnapshots(
    after: Int
    contractId: Int!
    dateStr: String!
    first: Int!
    kind: PnlSnapshotKind!
  ): PnlSnapshotDetailsConnection!
  getPnlSnapshotsByAddress(address: String!, dateStr: String!): [PnlSnapshot!]!
  getServerTime: ServerTime!
  getTradeCollaterals(contractId: Int!): [TradeCollateral!]!
  getTradeHistories(address: String!, contractId: Int!): [TradeHistory!]!
  getTradePairs(contractId: Int!): [TradePair!]!
  getTradeTransactionCounts(
    addresses: [String!]!
    contractIds: [Int!]!
  ): TradeTransactionCount!
  getTrades(address: String!, contractId: Int!): [FollowerTrade!]!
  getUserByAddress(input: GetUserByAddressInput!): User!
  getUserTransactionCounts(
    inputs: [GetUserTransactionCountsInput!]!
  ): [TradeTransactionCount!]!
  isPnlSnapshotInitialized(dateStr: String!): PnlSnapshotInitializedFlag
  systemStatus: Boolean!
}

type ServerTime {
  timestamp: Float!
  timezone: String!
}

type SeverityCount {
  counts: Int!
  severity: LogSeverity!
}

type Strategy {
  collateralBaseline: Int!
  id: Int!
  lifeTime: Int!
  maxCollateral: Int!
  maxLeverage: Int!
  minCollateral: Int!
  minLeverage: Int!
  params: String!
  ratio: Int!
  strategyKey: String!
}

type StrategyMetadata {
  description: String!
  key: String!
  title: String!
}

type Subscription {
  followerDetailsUpdated(contractId: Int!): [FollowerDetail!]!
  missionAdded: [MissionBackwardDetails!]!
  missionUpdated: [MissionBackwardDetails!]!
  taskAdded: [TaskBackwardDetails!]!
  taskUpdated: [TaskBackwardDetails!]!
}

type Tag {
  categoryId: Int
  color: String!
  description: String!
  tag: String!
}

type TagCategory {
  category: String!
  description: String!
  id: Int!
}

input TagCategoryInput {
  category: String!
  description: String!
}

input TagInput {
  categoryId: Int
  color: String!
  description: String!
  tag: String!
}

type TaskBackwardDetails {
  action: Action!
  actionId: Int!
  createdAt: DateTime!
  followerActions: [FollowerActionDetails!]!
  id: Int!
  logs: [String!]!
  mission: MissionBackwardDetails!
  missionId: Int!
  status: TaskStatus!
}

type TaskForwardDetails {
  action: Action!
  actionId: Int!
  createdAt: DateTime!
  followerActions: [FollowerActionDetails!]!
  id: Int!
  logs: [String!]!
  missionId: Int!
  status: TaskStatus!
}

enum TaskStatus {
  Await
  Completed
  Created
  Failed
  Initiated
  Stopped
}

enum TradeActionType {
  TradeClosedLIQ
  TradeClosedMarket
  TradeClosedSL
  TradeClosedTP
  TradeLeverageUpdate
  TradeOpenedLimit
  TradeOpenedMarket
  TradePosSizeDecrease
  TradePosSizeIncrease
}

type TradeCollateral {
  collateral: String!
  collateralIndex: Int!
  isActive: Boolean!
  precision: String!
  precisionDelta: String!
}

type TradeHistory {
  action: TradeActionType!
  address: String!
  block: Int!
  collateralDelta: String
  collateralIndex: Int!
  collateralPriceUsd: String!
  contractId: Int!
  date: DateTime!
  id: Int!
  leverage: Int!
  leverageDelta: Int
  long: Int!
  marketPrice: String
  pair: String!
  pnl: String!
  price: String!
  size: String!
  tradeId: String
  tradeIndex: Int!
}

type TradePair {
  from: String!
  pairIndex: Int!
  to: String!
}

type TradeTransactionCount {
  daily: Int!
  monthly: Int!
  weekly: Int!
}

input UpdatePlanInput {
  description: String
  id: Int!
  scheduledEnd: DateTime
  scheduledStart: DateTime
  status: PlanStatus!
  title: String
}

input UpdateStrategyMetadataInput {
  description: String
  title: String
}

type User {
  address: String!
  tags: [Tag!]!
}

input WithdrawAllInput {
  address: String!
  contractId: Int!
}
