schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Action {
  args: String!
  blockNumber: Int!
  createdAt: DateTime!
  id: Int!
  name: String!
  orderInBlock: Int!
  positionId: Int!
}

input AddUserInput {
  address: String!
}

type Bot {
  endedAt: DateTime
  followerAddress: String!
  followerContractId: Int!
  followerEndedBlock: Int
  followerStartedBlock: Int
  id: Int!
  leaderAddress: String!
  leaderCollateralBaseline: Int!
  leaderContractId: Int!
  leaderEndedBlock: Int
  leaderStartedBlock: Int
  startedAt: DateTime
  status: BotStatus!
  strategyId: Int!
}

type BotDetails {
  endedAt: DateTime
  follower: Follower!
  followerAddress: String!
  followerContract: Contract!
  followerContractId: Int!
  followerEndedBlock: Int
  followerStartedBlock: Int
  id: Int!
  leader: User!
  leaderAddress: String!
  leaderCollateralBaseline: Int!
  leaderContract: Contract!
  leaderContractId: Int!
  leaderEndedBlock: Int
  leaderStartedBlock: Int
  startedAt: DateTime
  status: BotStatus!
  strategy: Strategy!
  strategyId: Int!
}

enum BotStatus {
  Created
  Dead
  Live
  Stop
}

input ChangeContractStatusInput {
  id: Int!
  status: String!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input ChangeUserRoleInput {
  address: String!
  role: String!
}

type Contract {
  address: String!
  chainId: Int!
  description: String!
  id: Int!
  status: ContractStatus!
}

enum ContractStatus {
  Dead
  Live
}

input CreateBotInput {
  followerAddress: String!
  followerContractId: Int!
  leaderAddress: String!
  leaderCollateralBaseline: Int!
  leaderContractId: Int!
  strategyId: Int!
}

input CreateContractInput {
  address: String!
  chainId: Int!
  description: String!
  lastBlockNumber: Int!
}

input CreateStrategyInput {
  collateralBaseline: Int!
  lifeTime: Float!
  maxCapacity: Float!
  maxCollateral: Float!
  maxLeverage: Int!
  minCapacity: Float!
  minCollateral: Float!
  minLeverage: Int!
  params: String!
  ratio: Int!
  strategyKey: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FindPositionInput {
  address: String!
  contractId: Int!
  index: Int!
}

type Follower {
  accountIndex: Int!
  address: String!
  publicKey: String!
}

type FollowerAction {
  actionId: Int!
  id: Int!
  taskId: Int!
}

type FollowerActionDetails {
  action: Action!
  actionId: Int!
  id: Int!
  task: Task!
  taskId: Int!
}

type FollowerDetail {
  accountIndex: Int!
  address: String!
  contractId: Int!
  ethBalance: String
  publicKey: String!
  usdcBalance: String
}

input GetFollowerByAddressInput {
  address: String!
}

input GetTokenInput {
  password: String!
}

type GetTokenResponse {
  accessToken: String!
}

input GetUserByAddressInput {
  address: String!
}

type Mission {
  achievePositionId: Int
  botId: Int!
  createdAt: DateTime!
  id: Int!
  status: MissionStatus!
  targetPositionId: Int!
  updatedAt: DateTime!
}

type MissionDetails {
  achievePosition: Position
  achievePositionId: Int
  bot: BotDetails!
  botId: Int!
  createdAt: DateTime!
  id: Int!
  status: MissionStatus!
  targetPosition: Position!
  targetPositionId: Int!
  updatedAt: DateTime!
}

type MissionShallowDetails {
  achievePosition: Position
  achievePositionId: Int
  bot: Bot!
  botId: Int!
  createdAt: DateTime!
  id: Int!
  status: MissionStatus!
  targetPosition: Position!
  targetPositionId: Int!
  updatedAt: DateTime!
}

enum MissionStatus {
  Closed
  Closing
  Created
  Opened
  Opening
}

type Mutation {
  addLeader(input: AddUserInput!): User!
  addUser(input: AddUserInput!): User!
  changeContractStatus(input: ChangeContractStatusInput!): Contract!
  changePassword(input: ChangePasswordInput!): Boolean!
  changeUserRole(input: ChangeUserRoleInput!): User!
  closeMission(id: Int!): MissionShallowDetails!
  createBot(input: CreateBotInput!): BotDetails!
  createContract(input: CreateContractInput!): Contract!
  createStrategy(input: CreateStrategyInput!): Strategy!
  deleteBot(id: Int!): Int!
  generateNewFollower: Follower!
  getToken(input: GetTokenInput!): GetTokenResponse!
  initalizePnlSnapshot: Boolean!
  liveBot(id: Int!): BotDetails!
  performTask(id: Int!): TaskShallowDetails!
  removeStrategy(id: Int!): Strategy!
  stopBot(id: Int!): BotDetails!
  updateStrategyMetadata(input: UpdateStrategyMetadataInput!, key: String!): StrategyMetadata!
  withdrawAll(input: WithdrawAllInput!): Boolean!
}

type PageInfo {
  endCursor: Int
  hasNextPage: Boolean!
}

type PnlSnapshotDetails {
  accUSDPnl: Int!
  address: String!
  contractId: Int!
  histories: [TradeHistory!]!
  id: Int!
  kind: PnlSnapshotKind!
}

type PnlSnapshotDetailsConnection {
  edges: [PnlSnapshotDetailsEdge!]!
  pageInfo: PageInfo!
}

type PnlSnapshotDetailsEdge {
  cursor: Int!
  node: PnlSnapshotDetails!
}

enum PnlSnapshotKind {
  ALL_TIME
  DAY
  HALF_YEAR
  MONTH
  THREE_MONTH
  TWO_MONTH
  TWO_WEEK
  TWO_YEAR
  WEEK
  YEAR
}

type Position {
  address: String!
  contractId: Int!
  id: Int!
  index: Int!
}

type PositionInfo {
  address: String!
  contractId: Int!
  index: Int!
}

type Query {
  findAction(id: Int!): Action
  findActionsByPosition(positionId: Float!): [Action!]!
  findAllPositions: [Position!]!
  findBot(id: Int!): BotDetails!
  findContract(id: Int!): Contract!
  findFollowerAction(id: Int!): FollowerActionDetails
  findPosition(input: FindPositionInput!): Position
  findPositionById(id: Int!): Position
  findStrategy(id: Int!): Strategy
  findStrategyMetadata(key: String!): StrategyMetadata!
  findTask(id: Int!): TaskShallowDetails!
  findTasksByMission(missionId: Int!): [TaskShallowDetails!]!
  getAllActions: [Action!]!
  getAllBots: [BotDetails!]!
  getAllContracts: [Contract!]!
  getAllFollowerActions: [FollowerAction!]!
  getAllFollowerDetails(contractId: Int!): [FollowerDetail!]!
  getAllFollowers: [Follower!]!
  getAllLeaderHistories(contractId: Int!): [UserHistory!]!
  getAllLeaders: [User!]!
  getAllMissions: [MissionShallowDetails!]!
  getAllStrategy: [Strategy!]!
  getAllStrategyMetadata: [StrategyMetadata!]!
  getAllTasks: [TaskShallowDetails!]!
  getAllUsers: [User!]!
  getFollowerPrivateKey(input: GetFollowerByAddressInput!): String!
  getPnlSnapshots(after: Int, contractId: Int!, first: Int!, kind: PnlSnapshotKind!): PnlSnapshotDetailsConnection!
  getTradeHistories(address: String!, contractId: Int!): [TradeHistory!]!
  getUserByAddress(input: GetUserByAddressInput!): User
}

type Strategy {
  collateralBaseline: Int!
  id: Int!
  lifeTime: Int!
  maxCapacity: Int!
  maxCollateral: Int!
  maxLeverage: Int!
  minCapacity: Int!
  minCollateral: Int!
  minLeverage: Int!
  params: String!
  ratio: Int!
  strategyKey: String!
}

type StrategyMetadata {
  description: String!
  key: String!
  title: String!
}

type Subscription {
  actionAdded: [Action!]!
  followerActionAdded: [FollowerAction!]!
  followerDetailsUpdated(contractId: Int!): [FollowerDetail!]!
  missionAdded: [MissionShallowDetails!]!
  missionUpdated: [MissionShallowDetails!]!
  taskAdded: [TaskShallowDetails!]!
  taskUpdated: [TaskShallowDetails!]!
}

type Task {
  actionId: Int!
  createdAt: DateTime!
  id: Int!
  logs: [String!]!
  missionId: Int!
  status: TaskStatus!
}

type TaskShallowDetails {
  action: Action!
  actionId: Int!
  createdAt: DateTime!
  id: Int!
  logs: [String!]!
  mission: Mission!
  missionId: Int!
  status: TaskStatus!
}

enum TaskStatus {
  Await
  Completed
  Created
  Failed
  Initiated
  Stopped
}

type TradeHistory {
  address: String!
  blockNumber: Int!
  contractId: Int!
  eventName: String!
  id: Int!
  in: Int!
  out: Int!
  pnl: Int!
  timestamp: DateTime!
}

input UpdateStrategyMetadataInput {
  description: String
  title: String
}

type User {
  address: String!
  role: UserRole!
}

type UserHistory {
  address: String!
  histories: [TradeHistory!]!
  role: UserRole!
}

enum UserRole {
  Leader
  User
}

input WithdrawAllInput {
  address: String!
  contractId: Int!
}